setwd('C:/GD/DS/Lefort/PCA')
data = read.csv('C:/GD/DS/Lefort/PCA/indata/Binaria_Ordinal_Q123456_HALF_SEMMISSINGBPI.csv')
data[c(1,2)] = NULL
#Porcentagem de valores faltantes:
missing = sum(is.na(data))/(nrow(data)*ncol(data))*100
#Aplicar o PCA
library(pcaMethods)
pca = bpca(data, nPcs = 2)
View(data)
setwd('C:/GD/DS/Lefort/PCA')
data = read.csv('C:/GD/DS/Lefort/PCA/indata/Binaria_Ordinal_Q123456_HALF_SEMMISSINGBPI.csv')
data[c(1,2)] = NULL
#Porcentagem de valores faltantes:
missing = sum(is.na(data))/(nrow(data)*ncol(data))*100
#Aplicar o PCA
library(pcaMethods)
pca = bpca(data, nPcs = 2)
View(data)
pca = bpca(as.matrix(data), nPcs = 2)
View(pca)
setwd('C:/GD/DS/Lefort/PCA')
data = read.csv('C:/GD/DS/Lefort/PCA/indata/Binaria_Ordinal_Q123456_HALF_SEMMISSINGBPI.csv')
data[c(1,2)] = NULL
#Porcentagem de valores faltantes:
missing = sum(is.na(data))/(nrow(data)*ncol(data))*100
#Aplicar o PCA
library(pcaMethods)
pca = bpca(as.matrix(data), nPcs = 2)
View(pca)
loadings = loadings(pca)
View(loadings)
scores = scores(pca)
View(scores)
plot(scores)
screeplot(pca)
pca = bpca(as.matrix(data))
loadings = loadings(pca)
scores = scores(pca)
plot(pca)
#Aplicar o PCA
library(pcaMethods)
pca = bpca(as.matrix(data))
loadings = loadings(pca)
scores = scores(pca)
plot(pca)
pca = bpca(as.matrix(data), nPcs = 20)
loadings = loadings(pca)
scores = scores(pca)
plot(pca)
screeplot(pca)
library(factoextra)
install.packages("factoextra")
library(factoextra)
eigenvalues = get_eigenvalue(pca)
pca = bpca(as.matrix(data), nPcs = 20)
library(factoextra)
eigenvalues = get_eigenvalue(pca)
pca@missing
pca@network
pca@subset
pca@completeObs
pca@scores
pca@loadings
plot(pca@loadings)
#Aplicar o PCA
library(pcaMethods)
pca = bpca(as.matrix(data), nPcs = 2)
plot(pca)
plot(pca@loadings)
pca = bpca(as.matrix(data), nPcs = 2)
plot(pca@loadings)
plot(pca@scores)
scores = pca@scores
View(scores)
loadings = pca@loadings
View(loadings)
plot(loadings$V1)
loadings = as.data.frame(pca@loadings)
plot(loadings$V1)
plot(bpca(as.matrix(data)))
?nipals
nipals(data, comps = 2, scaled = TRUE)
#Aplicar o PCA
library(pcaMethods)
nipals(data, comps = 2, scaled = TRUE)
install.packages("plsdepot")
library(plsdepot)
nipals(data, comps = 2, scaled = TRUE)
ppca(data, nPcs = 2)
nipals(as.matrix(data), comps = 2, scaled = TRUE)
ppca(as.matrix(data), nPcs = 2)
pca_p = ppca(as.matrix(data), nPcs = 2)
scaled_data = scale(data)
pca = bpca(as.matrix(scaled_data), nPcs = 2)
scores = pca@scores
loadings = as.data.frame(pca@loadings)
plot(loadings$V1)
plot(bpca(as.matrix(data)))
plot(bpca(as.matrix(scaled_data)))
View(scaled_data)
View(data)
scaled_ord = scale(data[c(105:147)])
scaled_data = cbind(data[c(1:104)], scaled_ord)
View(scaled_data)
scaled_ord = scale(data[c(105:147)])
View(scaled_ord)
scaled_data = cbind(data[c(1:104)], scaled_ord)
View(scaled_data)
data[104]
View(data)
scaled_ord = scale(data[c(102:147)])
scaled_data = cbind(data[c(1:101)], scaled_ord)
View(scaled_data)
#Aplicar o PCA
library(pcaMethods)
pca = bpca(as.matrix(scaled_data), nPcs = 2)
scores = pca@scores
loadings = as.data.frame(pca@loadings)
plot(loadings$V1)
plot(bpca(as.matrix(scaled_data)))
plot(loadings$V1)
plot(loadings$V1, loadings$V2)
#Clusterização
plot(loadings$V1, loadings$V2)
View(scores)
View(loadings)
#Screeplot?
fviz_eig(pca)
pca = bpca(as.matrix(scaled_data), nPcs = 20)
scores = pca@scores
df_loadings = as.data.frame(pca@loadings)
View(df_loadings)
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$V1), ncol=1)
for (i in 1:length(df_loadings$PC1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
dotchart(ordenado,
cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
Sys.sleep(5)
}
View(df_ordenado)
#Aplicar o PCA
library(pcaMethods)
pca = bpca(as.matrix(scaled_data), nPcs = 20)
scores = pca@scores
loadings = pca@loadings
df_loadings = as.data.frame(pca@loadings)
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$V1), ncol=1)
for (i in 1:length(df_loadings$PC1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
dotchart(ordenado,
cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
Sys.sleep(5)
}
for (i in 1:length(df_loadings$PC1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
#dotchart(ordenado,
cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
#Sys.sleep(5)
}
#dotchart(ordenado,
#cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$V1), ncol=1)
for (i in 1:length(df_loadings$PC1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
#dotchart(ordenado,
#cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
#Sys.sleep(5)
}
View(Variaveis_Importantes)
for (i in 1:length(df_loadings$V1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
#dotchart(ordenado,
#cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
#Sys.sleep(5)
}
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$V1), ncol=1)
for (i in 1:length(df_loadings$V1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
#dotchart(ordenado,
#cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
#Sys.sleep(5)
}
View(df_loadings)
#Aplicar o PCA
library(pcaMethods)
pca = bpca(as.matrix(scaled_data), nPcs = 20)
scores = pca@scores
loadings = pca@loadings
df_loadings = as.data.frame(pca@loadings)
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$V1), ncol=1)
for (i in 1:length(df_loadings$V1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
#dotchart(ordenado,
#cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
#Sys.sleep(5)
}
View(Variaveis_Importantes)
#Aplicar o PCA
library(pcaMethods)
pca = bpca(as.matrix(scaled_data), nPcs = 20)
scores = pca@scores
loadings = pca@loadings
df_loadings = as.data.frame(pca@loadings)
loadings = as.data.frame(pca@loadings)
df_loadings = as.data.frame(pca@loadings)
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$V1), ncol=1)
for (i in 1:length(df_loadings$V1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
#dotchart(ordenado,
#cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
#Sys.sleep(5)
}
View(loadings)
#Aplicar o PCA
library(pcaMethods)
pca = bpca(as.matrix(scaled_data), nPcs = 20)
scores = pca@scores
loadings = pca@loadings
df_loadings = as.data.frame(pca@loadings)
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$V1), ncol=1)
for (i in 1:length(df_loadings$V1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
#dotchart(ordenado,
#cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
#Sys.sleep(5)
}
class(loadings)
pca = bpca(as.matrix(scaled_data), nPcs = 147)
scores = pca@scores
loadings = pca@loadings
df_loadings = as.data.frame(pca@loadings)
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$V1), ncol=1)
for (i in 1:length(df_loadings$V1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
#dotchart(ordenado,
#cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
#Sys.sleep(5)
}
write.csv( Variaveis_Importantes, 'Variaveis_Principais.csv')
View(Variaveis_Importantes)
View(loadings)
pca = bpca(as.matrix(scaled_data), nPcs = 10)
scores = pca@scores
loadings = pca@loadings
df_loadings = as.data.frame(pca@loadings)
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$V1), ncol=1)
for (i in 1:length(df_loadings$V1)) {
ordenado = loadings[order(abs(loadings[,i])),]
#dotchart(ordenado,
#cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
#Sys.sleep(5)
}
#Visualizar os dados em 2 dimensões
plot(loadings$V1, loadings$V2)
loadings = pca@loadings
#Visualizar os dados em 2 dimensões
plot(loadings$V1, loadings$V2)
