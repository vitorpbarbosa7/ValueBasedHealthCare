table(tabela_basquete)
table(tabela_basquete$equipe)
tapply(X=tabela_basquete$num_cestas, INDEX = tabela_basquete$equipe, FUN = mean)
# tapply() vs sqldf
install.package('sqldf')
# tapply() vs sqldf
install.packages('sqldf')
?sqldf
??sqldf
# tapply() vs sqldf
# install.packages('sqldf')
library(sqldf)
sqldf("SELECT equipe, SUM(num_cestas)
FROM tabela_basquete
GROUP BY equipe")
sqldf("SELECT equipe, MEAN(num_cestas)
FROM tabela_basquete
GROUP BY equipe")
sqldf("SELECT equipe, AVERAGE(num_cestas)
FROM tabela_basquete
GROUP BY equipe")
sqldf("SELECT equipe, AVG(num_cestas)
FROM tabela_basquete
GROUP BY equipe")
sqldf('SELECT equipe as Equipe, MAX(num_cestas) as Número de Cestas
FROM tabela_basquete
GROUP BY equipe')
sqldf('SELECT equipe as Equipe, MAX(num_cestas) as Num_Cestas
FROM tabela_basquete
GROUP BY equipe')
tapply(X = tabela_basquete$num_cestas, INDEX = tabela_basquete$equipe, FUN = sum)
tapply(X = tabela_basquete$num_cestas, INDEX = tabela_basquete$equipe, FUN = max)
# Mínimo
tapply(X = tabela_basquete$num_cestas, INDEX = tabela_basquete$equipe, FUN = min)
?by
data = iris
by(iris, INDICES = Petal.Length, FUN = mean)
View(data)
by(iris, INDICES = Species, FUN = mean)
by(iris, INDICES = levels(data$Species), FUN = mean)
levels(data$Species)
by(iris, INDICES = data$Species, FUN = mean)
mean_pl = mean(x$Petal.Length)
by(iris, INDICES = data$Species,
function(x) {
mean_pl = mean(x$Petal.Length)
})
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
data
names(data)
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
View(data)
View(tabela_basquete)
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
sqldf('SELECT AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM iris
GROUP BY Species')
sqldf("SELECT equipe, AVG(num_cestas)
FROM tabela_basquete
GROUP BY equipe")
names(data)
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
?by
?apply
mean_pl = c(apply(data[,c(1,2,3,4)], MARGIN = 2, FUN = mean))
source('C:/GD/DS/1Formacao/1BigDataAnalytics_R_Azure_ML/3-FatoresControleFuncoes/07-FamiliaApplyR.R', encoding = 'UTF-8', echo=TRUE)
by(iris, INDICES = data$Species,
function(x) {
mean_pl = c(apply(data[,c(1,2,3,4)], MARGIN = 2, FUN = mean))
})
by(iris, INDICES = data$Species,
function(x) {
mean_pl = c(data$Sepal.Length,data$Sepal.Width)
})
by(iris, INDICES = data$Species,
function(x) {
mean_pl = c(mean(data$Sepal.Length),mean(data$Sepal.Width))
})
by(iris, INDICES = data$Species,
function(x) {
mean_pl = mean(data$Sepal.Length)
})
View(data)
by(iris, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Sepal.Length)
})
by(iris, INDICES = as.factor(data$Species),
function(x) {
mean_pl <- mean(data$Sepal.Length)
})
levels(data$Species)
by(iris, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
by(iris, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
# novo dat
dat <- data.frame(species=c(rep(c(1,2,3), each=5)),
petal.length=c(rnorm(5, 4.5, 1),
rnorm(5, 4.5, 1),
rnorm(5, 5.5, 1)),
petal.width=c(rnorm(5, 2.5, 1),
rnorm(5, 2.5, 1),
rnorm(5, 4, 1)))
dat
str(data)
dat$species <- factor(dat$species)
View(dat)
by(dat, dat$species, function(x){
# calcular o comprimento médio da pétala para cada espécie
mean.pl <- mean(x$petal.length)
})
str(dat)
str(data)
data = iris
data$Species = factor(data$Species)
str(data)
levels(data$Species)
by(iris, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
by(data, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
by(data, data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
by(data, data$Species, function(x) {
mean_pl <- mean(x$Petal.Length)
})
?apply
by(data, INDICES = data$Species,
function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- c(apply(x[1,2,3,4], #Aplicar a função média sobre esses dados
MARGIN = 2, # Média por coluna
FUN = mean) # Média
})
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
mean_pl <- c(apply(x[1,2,3,4], #Aplicar a função média sobre esses dados
MARGIN = 2, # Média por coluna
FUN = mean)) # Média
by(data, INDICES = data$Species,
function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- c(apply(x[1,2,3,4], #Aplicar a função média sobre esses dados
MARGIN = 2, # Média por coluna
FUN = mean)) # Média
})
by(data, INDICES = data$Species,
function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- apply(x[1,2,3,4], #Aplicar a função média sobre esses dados
MARGIN = 2, # Média por coluna
FUN = mean) # Média
})
by(data, data$Species, function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- sapply(x[,c(1,2,3,4)],mean) # E COLOCAR O X AQUI TAMBÉM!
})
by(data, data$Species, function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- apply(x[,c(1,2,3,4)],2,mean) # E COLOCAR O X AQUI TAMBÉM!
})
# vapply()
?vapply()
# Lista com dois elementos
lista1 = list(a = c(1:10), b=(45:77))
lista1
lapply(lista1, sum)
sapply(lista1, sum)
?vapply()
fivenum
?fivenum
?vapply()
vapply(lista1,
fivenum)
vapply(lista1,
fivenum)
vapply(x = lista1,
FUN = fivenum,
FUN.VALUE =
c('a' = .0,
'b' = .0,
'c' = .0,
'd' = .0,
'e' = .0))
vapply(X = lista1,
FUN = fivenum,
FUN.VALUE =
c('a' = .0,
'b' = .0,
'c' = .0,
'd' = .0,
'e' = .0))
vapply(X = lista1,
FUN = fivenum,
FUN.VALUE =
c('Min' = .0,
'1stQu' = .0,
'Median' = .0,
'3stQu' = .0,
'Max' = .0))
# replicate
?replicate
# replicate
?replicate(7, runif(1:10))
# replicate
replicate(7, runif(1:10))
#mapply()
mapply(rep, 1:4, 4:1)
?mapply
#mapply()
mapply(rep, 1:3, 4:1)
#mapply()
mapply(rep, 1:4, 3:1)
#mapply()
mapply(rep, 1:4, 4:1)
# rapply()
?rapply()
lista2 = list(a = c(1:5),
b = (6:10))
lista2
rapply(lista2, sum)
rapply(lista2, sum, how = 'list')
# Este código contém comandos para filtrar e plotar os dados de aluguel de bikes,
# dados que estão em nosso dataset
# Este código foi criado para executar tanto no Azure, quanto no RStudio.
# Para executar no Azure, altere o valor da variavel Azure para TRUE.
# Se o valor for FALSE, o código sera executado no RStudio
# Obs: Caso tenha problemas com a acentuação, consulte este link:
# https://support.rstudio.com/hc/en-us/articles/200532197-Character-Encoding
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:/GD/DS/1Formacao/1BigDataAnalytics_R_Azure_ML/13-DataMunging_Azure")
getwd()
# Variável que controla a execução do script
Azure <- FALSE
# Execução de acordo com o valor da variável Azure
if(Azure){
source("src/Tools.R")
Bikes <- maml.mapInputPort(1)
Bikes$dteday <- set.asPOSIXct(Bikes)
}else{
source("Tools.R")
Bikes <- read.csv("datasets/bikes.csv", sep = ",", header = T, stringsAsFactors = F )
Bikes$dteday <- char.toPOSIXct(Bikes)
}
require(dplyr)
print("Dimensões do dataframe antes das operações de transformação:")
print(dim(Bikes))
# Filtrando o dataframe
Bikes <- Bikes %>% filter(cnt > 100)
print("Dimensões do dataframe após as operações de transformação:")
print(dim(Bikes))
# ggplot2
require(ggplot2)
qplot(dteday, cnt, data = subset(Bikes, hr == 9), geom = "line")
# Resultado
if(Azure) maml.mapOutputPort("Bikes")
# Este código contém comandos para filtrar e plotar os dados de aluguel de bikes,
# dados que estão em nosso dataset
# Este código foi criado para executar tanto no Azure, quanto no RStudio.
# Para executar no Azure, altere o valor da variavel Azure para TRUE.
# Se o valor for FALSE, o código sera executado no RStudio
# Obs: Caso tenha problemas com a acentuação, consulte este link:
# https://support.rstudio.com/hc/en-us/articles/200532197-Character-Encoding
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:/GD/DS/1Formacao/1BigDataAnalytics_R_Azure_ML/13-DataMunging_Azure")
getwd()
# Variável que controla a execução do script
Azure <- FALSE
# Execução de acordo com o valor da variável Azure
if(Azure){
source("src/Tools.R")
Bikes <- maml.mapInputPort(1)
Bikes$dteday <- set.asPOSIXct(Bikes)
}else{
source("Tools.R")
Bikes <- read.csv("datasets/bikes.csv", sep = ",", header = T, stringsAsFactors = F )
Bikes$dteday <- char.toPOSIXct(Bikes)
}
require(dplyr)
print("Dimensões do dataframe antes das operações de transformação:")
print(dim(Bikes))
# Filtrando o dataframe
Bikes <- Bikes %>% filter(cnt > 100)
print("Dimensões do dataframe após as operações de transformação:")
print(dim(Bikes))
# ggplot2
require(ggplot2)
qplot(dteday, cnt, data = subset(Bikes, hr == 9), geom = "line")
# plot
plot(cnt ~ temp, Bikes)
# plot
plot(casual ~ registered, Bikes)
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:/GD/DS/1Formacao/1BigDataAnalytics_R_Azure_ML/13-DataMunging_Azure")
getwd()
# Variável que controla a execução do script
Azure = FALSE
# Dois datasets denominados de "restaurante" e "ratings"
if(Azure){
restaurantes <- maml.mapInputPort(1)
ratings <- maml.mapInputPort(2)
}else{
restaurantes  <- read.csv("datasets/Restaurant-features.csv", sep = ",", header = T, stringsAsFactors = F )
ratings <- read.csv("datasets/Restaurant-ratings.csv", sep = ",", header = T, stringsAsFactors = F)
}
str(restaurantes)
str(ratings)
# Filtros:
restaurantes = subset(restaurantes, franchise == 'f' & alcohol == 'No_Alcohol_Served')
# Dplyr para inner_join
df = restaurantes %>%
inner_join(ratings, by = placeID) %>%
summarise(media = mean(rating)) %>%
group_by(placeID) %>%
order_by(media)
rm(list=ls())
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:/GD/DS/1Formacao/1BigDataAnalytics_R_Azure_ML/13-DataMunging_Azure")
getwd()
rm(list=ls())
# Variável que controla a execução do script
Azure = FALSE
# Dois datasets denominados de "restaurante" e "ratings"
if(Azure){
restaurantes <- maml.mapInputPort(1)
ratings <- maml.mapInputPort(2)
}else{
restaurantes  <- read.csv("datasets/Restaurant-features.csv", sep = ",", header = T, stringsAsFactors = F )
ratings <- read.csv("datasets/Restaurant-ratings.csv", sep = ",", header = T, stringsAsFactors = F)
}
str(restaurantes)
str(ratings)
# Filtros:
restaurantes = subset(restaurantes, franchise == 'f' & alcohol == 'No_Alcohol_Served')
View(restaurantes)
# Este código contém comandos para filtrar e plotar os dados de aluguel de bikes,
# dados que estão em nosso dataset.
# Este código foi criado para executar tanto no Azure, quanto no RStudio.
# Para executar no Azure, altere o valor da variavel Azure para TRUE.
# Se o valor for FALSE, o codigo sera executado no RStudio.
# Obs: Caso tenha problemas com a acentuação, consulte este link:
# https://support.rstudio.com/hc/en-us/articles/200532197-Character-Encoding
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:/GD/DS/1Formacao/1BigDataAnalytics_R_Azure_ML/13-DataMunging_Azure")
getwd()
rm(list=ls())
# Variável que controla a execução do script
Azure = FALSE
# Dois datasets denominados de "restaurante" e "ratings"
if(Azure){
restaurantes <- maml.mapInputPort(1)
ratings <- maml.mapInputPort(2)
}else{
restaurantes  <- read.csv("datasets/Restaurant-features.csv", sep = ",", header = T, stringsAsFactors = F )
ratings <- read.csv("datasets/Restaurant-ratings.csv", sep = ",", header = T, stringsAsFactors = F)
}
str(restaurantes)
str(ratings)
# Filtros:
restaurantes = subset(restaurantes, franchise == 'f' & alcohol == 'No_Alcohol_Served')
# Dplyr para inner_join
df = restaurantes %>%
inner_join(ratings, by = 'placeID') %>%
summarise(media = mean(rating)) %>%
group_by(placeID) %>%
order_by(media)
View(ratings)
View(restaurantes)
# Dplyr para inner_join
df = restaurantes %>%
inner_join(ratings, by = 'placeID') %>%
select(placeID, name, rating) %>%
summarise(media = mean(rating)) %>%
group_by(placeID) %>%
order_by(media)
library(dplyr)
# Dplyr para inner_join
df = restaurantes %>%
inner_join(ratings, by = 'placeID') %>%
select(placeID, name, rating) %>%
summarise(media = mean(rating)) %>%
group_by(placeID) %>%
order_by(media)
library(dplyr)
# Dplyr para inner_join
df = as.data.frame(restaurantes %>%
inner_join(ratings, by = 'placeID') %>%
select(placeID, name, rating) %>%
summarise(media = mean(rating)) %>%
group_by(placeID) %>%
order_by(media))
df <- as.data.frame(restaurantes %>%
inner_join(ratings, by = 'placeID') %>%
select(name, rating) %>%
group_by(name) %>%
summarize(ave_Rating = mean(rating)) %>%
arrange(desc(ave_Rating)))
# Dplyr para inner_join
df = as.data.frame(restaurantes %>%
inner_join(ratings, by = 'placeID') %>%
select(placeID, name, rating) %>%
summarise(media = mean(rating)) %>%
group_by('placeID') %>%
order_by(media))
# Dplyr para inner_join
df = as.data.frame(restaurantes %>%
inner_join(ratings, by = 'placeID') %>%
select(placeID, name, rating) %>%
summarise(media = mean(rating)) %>%
group_by(placeID) %>%
order_by(media))
# Dplyr para inner_join
df = as.data.frame(restaurantes %>%
inner_join(ratings, by = 'placeID') %>%
select(placeID, name, rating) %>%
summarise(media = mean(rating)) %>%
order_by(media))
# Dplyr para inner_join
df = as.data.frame(restaurantes %>%
inner_join(ratings, by = 'placeID') %>%
select(name, rating) %>%
summarise(media = mean(rating)) %>%
order_by(media))
# Dplyr para inner_join
df = as.data.frame(restaurantes %>%
inner_join(ratings, by = 'placeID') %>%
select(name, rating) %>%
summarise(media = mean(rating)) %>%
arrange(media))
# Dplyr para inner_join
df = as.data.frame(restaurantes %>%
inner_join(ratings, by = 'placeID') %>%
select(placeID, name, rating) %>%
summarise(media = mean(rating)) %>%
group_by(placeID) %>%
arrange(media))
# Dplyr para inner_join
df = as.data.frame(restaurantes %>%
inner_join(ratings, by = 'placeID') %>%
select(placeID, name, rating) %>%
summarise(media = mean(rating)) %>%
arrange(media))
# Este código contém comandos para filtrar e plotar os dados de aluguel de bikes,
# dados que estão em nosso dataset.
# Este código foi criado para executar tanto no Azure, quanto no RStudio.
# Para executar no Azure, altere o valor da variavel Azure para TRUE.
# Se o valor for FALSE, o codigo sera executado no RStudio.
# Obs: Caso tenha problemas com a acentuação, consulte este link:
# https://support.rstudio.com/hc/en-us/articles/200532197-Character-Encoding
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:/GD/DS/1Formacao/1BigDataAnalytics_R_Azure_ML/13-DataMunging_Azure")
getwd()
rm(list=ls())
# Variável que controla a execução do script
Azure = FALSE
# Dois datasets denominados de "restaurante" e "ratings"
if(Azure){
restaurantes <- maml.mapInputPort(1)
ratings <- maml.mapInputPort(2)
}else{
restaurantes  <- read.csv("datasets/Restaurant-features.csv", sep = ",", header = T, stringsAsFactors = F )
ratings <- read.csv("datasets/Restaurant-ratings.csv", sep = ",", header = T, stringsAsFactors = F)
}
str(restaurantes)
str(ratings)
# Filtros:
restaurantes = subset(restaurantes, franchise == 'f' & alcohol == 'No_Alcohol_Served')
library(dplyr)
# Dplyr para inner_join
df <- as.data.frame(restaurantes %>%
inner_join(ratings, by = 'placeID') %>%
select(name, rating) %>%
group_by(name) %>%
summarize(ave_Rating = mean(rating)) %>%
arrange(desc(ave_Rating)))
setwd('C:/GD/DS/Lefort/MissingVisualization')
getwd()
data = read.csv('dados.csv')
# Visualizar valores missing
library(Amelia)
map_missing = missmap(obj = data)
View(data)
