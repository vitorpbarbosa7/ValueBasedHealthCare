pca_var2 = get_eigenvalue(pcacorr)
variancias = pca_var2$eigenvalue
# Screeplot ---------------------------------------------------------------
#Screeplot:
fviz_eig(pcacorr)
tiff("outputdata/img/screeplot.tiff", width = 2000, height = 1600, res = 300)
plot(pca_var2$cumulative.variance.percent,type = 'b',
ylab = "Cumulative Variance Explained (%)",
xlab = "Principal Components")
abline(h=90,lty=2,lwd=1.5,col=2)
dev.off()
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$PC1), ncol=1)
for (i in 1:length(df_loadings$PC1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
dotchart(ordenado,
cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
Sys.sleep(1)
}
Variaveis_Importantes
write.csv( Variaveis_Importantes, 'outputdata/Variaveis_Principais_PCA.csv')
biplot(pcacorr,scale = 0,cex=c(0.5,0.85))
# GGplot
rm(list=ls())
data = read.csv('outputdata/pca.csv')
data[1] = NULL
View(data)
# Tratamento da classe lombalgia para plot
data$classe = sub('False','No',data$classe)
data$classe = sub('True','Yes',data$classe)
names(data)[4] = 'Low back pain'
data$`Low back pain` = as.factor(data$`Low back pain `)
View(data)
data[4] = as.factor(data[4])
#Plot 3D
library(scatterplot3d)
colors <- c("#999999", "#E69F00")
colors = colors[as.numeric(data[4])]
View(data)
rm(list=ls())
setwd('C:/GD/DS/Lefort/ML')
#Fazer o PCA no R
pcadata = read.csv('outputdata/Xpcadata.csv')
pcadata[1] = NULL
#Aplicacao PCA
pcacorr = prcomp(pcadata, scale = T)
summary(pcacorr)
names(pcacorr)
desvios_pca = pcacorr$sdev
loadings = pcacorr$rotation
df_loadings = as.data.frame(loadings)
medias = pcacorr$center
coordenadas = pcacorr$x
#Extraaindo mais valores do objeto PCA para realizar plots
library(factoextra)
pca_var2 = get_eigenvalue(pcacorr)
variancias = pca_var2$eigenvalue
# Screeplot ---------------------------------------------------------------
#Screeplot:
fviz_eig(pcacorr)
tiff("outputdata/img/screeplot.tiff", width = 2000, height = 1600, res = 300)
plot(pca_var2$cumulative.variance.percent,type = 'b',
ylab = "Cumulative Variance Explained (%)",
xlab = "Principal Components")
abline(h=90,lty=2,lwd=1.5,col=2)
dev.off()
# Loadings Plot -----------------------------------------------------------=
#Ordenar toda a matriz loadings de acordo com o crit?rio de valores presentes na coluna PC1
#loadings[order(abs(###ordenar as linhas###, de acordo com crit?rio da coluna ))]
#Este c?digo retorna um vetor ordenado com as correspond?ncias entre loadings do PC1 e cada Variavel
# ordenado = loadings[order(abs(loadings[,1])),1]
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$PC1), ncol=1)
for (i in 1:length(df_loadings$PC1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
dotchart(ordenado,
cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
Sys.sleep(1)
}
Variaveis_Importantes
write.csv( Variaveis_Importantes, 'outputdata/Variaveis_Principais_PCA.csv')
biplot(pcacorr,scale = 0,cex=c(0.5,0.85))
# GGplot
rm(list=ls())
data = read.csv('outputdata/pca.csv')
data[1] = NULL
# Tratamento da classe lombalgia para plot
data$classe = sub('False','No',data$classe)
data$classe = sub('True','Yes',data$classe)
names(data)[4] = 'Low back pain'
View(data)
data[4] = as.factor(data[4])
# GGplot
rm(list=ls())
data = read.csv('outputdata/pca.csv')
data[1] = NULL
# Tratamento da classe lombalgia para plot
data$classe = sub('False','No',data$classe)
data$classe = sub('True','Yes',data$classe)
View(data)
data$classe = as.factor(data$classe)
names(data)[4] = 'Low back pain'
View(data)
#Plot 3D
library(scatterplot3d)
colors <- c("#999999", "#E69F00")
rm(list=ls())
setwd('C:/GD/DS/Lefort/ML')
#Fazer o PCA no R
pcadata = read.csv('outputdata/Xpcadata.csv')
pcadata[1] = NULL
#Aplicacao PCA
pcacorr = prcomp(pcadata, scale = T)
summary(pcacorr)
names(pcacorr)
desvios_pca = pcacorr$sdev
loadings = pcacorr$rotation
df_loadings = as.data.frame(loadings)
medias = pcacorr$center
coordenadas = pcacorr$x
#Extraaindo mais valores do objeto PCA para realizar plots
library(factoextra)
pca_var2 = get_eigenvalue(pcacorr)
variancias = pca_var2$eigenvalue
# Screeplot ---------------------------------------------------------------
#Screeplot:
fviz_eig(pcacorr)
tiff("outputdata/img/screeplot.tiff", width = 2000, height = 1600, res = 300)
plot(pca_var2$cumulative.variance.percent,type = 'b',
ylab = "Cumulative Variance Explained (%)",
xlab = "Principal Components")
abline(h=90,lty=2,lwd=1.5,col=2)
dev.off()
# Loadings Plot -----------------------------------------------------------=
#Ordenar toda a matriz loadings de acordo com o crit?rio de valores presentes na coluna PC1
#loadings[order(abs(###ordenar as linhas###, de acordo com crit?rio da coluna ))]
#Este c?digo retorna um vetor ordenado com as correspond?ncias entre loadings do PC1 e cada Variavel
# ordenado = loadings[order(abs(loadings[,1])),1]
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$PC1), ncol=1)
for (i in 1:length(df_loadings$PC1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
dotchart(ordenado,
cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
Sys.sleep(1)
}
Variaveis_Importantes
write.csv( Variaveis_Importantes, 'outputdata/Variaveis_Principais_PCA.csv')
biplot(pcacorr,scale = 0,cex=c(0.5,0.85))
# GGplot
rm(list=ls())
data = read.csv('outputdata/pca.csv')
data[1] = NULL
# Tratamento da classe lombalgia para plot
data$classe = sub('False','No',data$classe)
data$classe = sub('True','Yes',data$classe)
data$classe = as.factor(data$classe)
#Plot 3D
library(scatterplot3d)
colors <- c("#999999", "#E69F00")
colors = colors[as.numeric(data[4])]
scatterplot3d(data[,1:3], color = colors, pch = 16,
box = F, angle = 30, cex.symbols = 1.2)
legend("right", legend = levels(data$Lombalgia), col = c("#999999", "#E69F00"), pch =16)
library(plotly)
#Plot ggplot 2D
library(tidyverse)
theme = theme_bw(base_size = 15) +
theme(legend.position = 'right',
legend.title = element_text(size = 18),
legend.text = element_text(size = 12), #Posição da legenda
plot.title = element_text(hjust =0.5), #Posição do título
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_blank(),
axis.text.y=element_text(colour="black"), #Cor do texto dos eixos
strip.background =element_rect(fill=NA, colour = NA)) #Cor do background dos títulos de cada
# GGplot
rm(list=ls())
data = read.csv('outputdata/pca.csv')
data[1] = NULL
# Tratamento da classe lombalgia para plot
data$classe = sub('False','No',data$classe)
data$classe = sub('True','Yes',data$classe)
data$classe = as.factor(data$classe)
#Plot 3D
library(scatterplot3d)
colors <- c("#999999", "#E69F00")
colors = colors[as.numeric(data[4])]
scatterplot3d(data[,1:3], color = colors, pch = 16,
box = F, angle = 30, cex.symbols = 1.2)
legend("right", legend = levels(data$classe), col = c("#999999", "#E69F00"), pch =16)
library(plotly)
#Plot ggplot 2D
library(tidyverse)
theme = theme_bw(base_size = 15) +
theme(legend.position = 'right',
legend.title = element_text(size = 18),
legend.text = element_text(size = 12), #Posição da legenda
plot.title = element_text(hjust =0.5), #Posição do título
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_blank(),
axis.text.y=element_text(colour="black"), #Cor do texto dos eixos
strip.background =element_rect(fill=NA, colour = NA)) #Cor do background dos títulos de cada
names(data)[4] = 'Low back pain'
g = ggplot(data, aes(x = PC1, y = PC2)) +
geom_point(aes_string(fill = 'Low back pain', color = 'Low back pain', shape = 'Low back pain'), size = 3) +
xlab('Principal Component 1') +
ylab('Principal Component 2') +
scale_fill_manual(values = c('#FF0000','#0000FF')) +
scale_color_manual(values = c('#FF0000','#0000FF')) +
theme
g
tiff('outputdata/img/PCA2D.tiff', units = 'in', width = 8, height = 6, res = 300)
g
dev.off()
# GGplot
rm(list=ls())
data = read.csv('outputdata/pca.csv')
data[1] = NULL
# Tratamento da classe lombalgia para plot
data$classe = sub('False','No',data$classe)
data$classe = sub('True','Yes',data$classe)
data$classe = as.factor(data$classe)
#Plot 3D
library(scatterplot3d)
colors <- c("#999999", "#E69F00")
colors = colors[as.numeric(data[4])]
scatterplot3d(data[,1:3], color = colors, pch = 16,
box = F, angle = 30, cex.symbols = 1.2)
scatterplot3d(data[,1:3], color = colors, pch = 16,
box = F, angle = 30, cex.symbols = 1.2)
# GGplot
rm(list=ls())
data = read.csv('outputdata/pca.csv')
data[1] = NULL
# Tratamento da classe lombalgia para plot
data$classe = sub('False','No',data$classe)
data$classe = sub('True','Yes',data$classe)
data$classe = as.factor(data$classe)
#Plot ggplot 2D
library(tidyverse)
theme = theme_bw(base_size = 15) +
theme(legend.position = 'right',
legend.title = element_text(size = 18),
legend.text = element_text(size = 12), #Posição da legenda
plot.title = element_text(hjust =0.5), #Posição do título
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_blank(),
axis.text.y=element_text(colour="black"), #Cor do texto dos eixos
strip.background =element_rect(fill=NA, colour = NA)) #Cor do background dos títulos de cada
names(data)[4] = 'Low back pain'
g = ggplot(data, aes(x = PC1, y = PC2)) +
geom_point(aes_string(fill = 'Low back pain', color = 'Low back pain', shape = 'Low back pain'), size = 3) +
xlab('Principal Component 1') +
ylab('Principal Component 2') +
scale_fill_manual(values = c('#FF0000','#0000FF')) +
scale_color_manual(values = c('#FF0000','#0000FF')) +
theme
View(data)
g = ggplot(data, aes_string(x = 'PC1', y = 'PC2')) +
geom_point(aes_string(fill = 'Low back pain', color = 'Low back pain', shape = 'Low back pain'), size = 3) +
xlab('Principal Component 1') +
ylab('Principal Component 2') +
scale_fill_manual(values = c('#FF0000','#0000FF')) +
scale_color_manual(values = c('#FF0000','#0000FF')) +
theme
g
# GGplot
rm(list=ls())
data = read.csv('outputdata/pca.csv')
data[1] = NULL
# Tratamento da classe lombalgia para plot
data$classe = sub('False','No',data$classe)
data$classe = sub('True','Yes',data$classe)
data$classe = as.factor(data$classe)
#Plot ggplot 2D
library(tidyverse)
theme = theme_bw(base_size = 15) +
theme(legend.position = 'right',
legend.title = element_text(size = 18),
legend.text = element_text(size = 12), #Posição da legenda
plot.title = element_text(hjust =0.5), #Posição do título
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_blank(),
axis.text.y=element_text(colour="black"), #Cor do texto dos eixos
strip.background =element_rect(fill=NA, colour = NA)) #Cor do background dos títulos de cada
names(data)[4] = 'Low back pain'
View(data)
names(data)
g = ggplot(data, aes_string(x = "PC1", y = "PC2")) +
geom_point(aes_string(fill = "Low back pain", color = "Low back pain", shape = "Low back pain"), size = 3) +
xlab('Principal Component 1') +
ylab('Principal Component 2') +
scale_fill_manual(values = c('#FF0000','#0000FF')) +
scale_color_manual(values = c('#FF0000','#0000FF')) +
theme
# GGplot
rm(list=ls())
data = read.csv('outputdata/pca.csv')
data[1] = NULL
# Tratamento da classe lombalgia para plot
data$classe = sub('False','No',data$classe)
data$classe = sub('True','Yes',data$classe)
data$classe = as.factor(data$classe)
#Plot ggplot 2D
library(tidyverse)
theme = theme_bw(base_size = 15) +
theme(legend.position = 'right',
legend.title = element_text(size = 18),
legend.text = element_text(size = 12), #Posição da legenda
plot.title = element_text(hjust =0.5), #Posição do título
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_blank(),
axis.text.y=element_text(colour="black"), #Cor do texto dos eixos
strip.background =element_rect(fill=NA, colour = NA)) #Cor do background dos títulos de cada
names(data)[4] = 'Lombalgia'
names(data)
g = ggplot(data, aes(x = PC1, y = PC2)) +
geom_point(aes(fill = Lombalgia, color = Lombalgia, shape = Lombalgia), size = 3) +
xlab('Principal Component 1') +
ylab('Principal Component 2') +
scale_fill_manual(values = c('#FF0000','#0000FF')) +
scale_color_manual(values = c('#FF0000','#0000FF')) +
labs(fill = 'Low back pain', color = 'Low back pain', shape = "Low back pain")
theme
g
tiff('outputdata/img/PCA2D.tiff', units = 'in', width = 8, height = 6, res = 300)
g
dev.off()
rm(list=ls())
setwd('C:/GD/DS/Lefort/RelevanciaEstatistica/INGLES/ML')
#Fazer o PCA no R
pcadata = read.csv('outputdata/Xpcadata.csv')
pcadata[1] = NULL
#Aplicacao PCA
pcacorr = prcomp(pcadata, scale = T)
summary(pcacorr)
names(pcacorr)
desvios_pca = pcacorr$sdev
loadings = pcacorr$rotation
df_loadings = as.data.frame(loadings)
medias = pcacorr$center
coordenadas = pcacorr$x
#Extraaindo mais valores do objeto PCA para realizar plots
library(factoextra)
pca_var2 = get_eigenvalue(pcacorr)
variancias = pca_var2$eigenvalue
# Screeplot ---------------------------------------------------------------
#Screeplot:
fviz_eig(pcacorr)
tiff("outputdata/img/screeplot.tiff", width = 2000, height = 1600, res = 300)
plot(pca_var2$cumulative.variance.percent,type = 'b',
ylab = "Cumulative Variance Explained (%)",
xlab = "Principal Components")
abline(h=90,lty=2,lwd=1.5,col=2)
dev.off()
# Loadings Plot -----------------------------------------------------------=
#Ordenar toda a matriz loadings de acordo com o crit?rio de valores presentes na coluna PC1
#loadings[order(abs(###ordenar as linhas###, de acordo com crit?rio da coluna ))]
#Este c?digo retorna um vetor ordenado com as correspond?ncias entre loadings do PC1 e cada Variavel
# ordenado = loadings[order(abs(loadings[,1])),1]
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$PC1), ncol=1)
for (i in 1:length(df_loadings$PC1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
dotchart(ordenado,
cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
Sys.sleep(1)
}
Variaveis_Importantes
write.csv( Variaveis_Importantes, 'outputdata/Variaveis_Principais_PCA.csv')
biplot(pcacorr,scale = 0,cex=c(0.5,0.85))
# GGplot
rm(list=ls())
data = read.csv('outputdata/pca.csv')
data[1] = NULL
# Tratamento da classe lombalgia para plot
data$classe = sub('False','No',data$classe)
data$classe = sub('True','Yes',data$classe)
data$classe = as.factor(data$classe)
#Plot 3D
library(scatterplot3d)
colors <- c("#999999", "#E69F00")
colors = colors[as.numeric(data[4])]
scatterplot3d(data[,1:3], color = colors, pch = 16,
box = F, angle = 30, cex.symbols = 1.2)
legend("right", legend = levels(data$classe), col = c("#999999", "#E69F00"), pch =16)
library(plotly)
#Plot ggplot 2D
library(tidyverse)
theme = theme_bw(base_size = 15) +
theme(legend.position = 'right',
legend.title = element_text(size = 18),
legend.text = element_text(size = 12), #Posição da legenda
plot.title = element_text(hjust =0.5), #Posição do título
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_blank(),
axis.text.y=element_text(colour="black"), #Cor do texto dos eixos
strip.background =element_rect(fill=NA, colour = NA)) #Cor do background dos títulos de cada
names(data)[4] = 'Low back pain'
g = ggplot(data, aes(x = PC1, y = PC2)) +
geom_point(aes_string(fill = 'Low back pain', color = 'Low back pain', shape = 'Low back pain'), size = 3) +
xlab('Principal Component 1') +
ylab('Principal Component 2') +
scale_fill_manual(values = c('#FF0000','#0000FF')) +
scale_color_manual(values = c('#FF0000','#0000FF')) +
theme
g
tiff('outputdata/img/PCA2D.tiff', units = 'in', width = 8, height = 6, res = 300)
g
dev.off()
rm(list=ls())
setwd('C:/GD/DS/Lefort/RelevanciaEstatistica/INGLES/ML')
#Fazer o PCA no R
pcadata = read.csv('outputdata/Xpcadata.csv')
pcadata[1] = NULL
#Aplicacao PCA
pcacorr = prcomp(pcadata, scale = T)
summary(pcacorr)
names(pcacorr)
desvios_pca = pcacorr$sdev
loadings = pcacorr$rotation
df_loadings = as.data.frame(loadings)
medias = pcacorr$center
coordenadas = pcacorr$x
#Extraaindo mais valores do objeto PCA para realizar plots
library(factoextra)
pca_var2 = get_eigenvalue(pcacorr)
variancias = pca_var2$eigenvalue
# Screeplot ---------------------------------------------------------------
#Screeplot:
fviz_eig(pcacorr)
tiff("outputdata/img/screeplot.tiff", width = 2000, height = 1600, res = 300)
plot(pca_var2$cumulative.variance.percent,type = 'b',
ylab = "Cumulative Variance Explained (%)",
xlab = "Principal Components")
abline(h=90,lty=2,lwd=1.5,col=2)
dev.off()
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$PC1), ncol=1)
for (i in 1:length(df_loadings$PC1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
dotchart(ordenado,
cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
Sys.sleep(1)
}
Variaveis_Importantes
write.csv( Variaveis_Importantes, 'outputdata/Variaveis_Principais_PCA.csv')
biplot(pcacorr,scale = 0,cex=c(0.5,0.85))
# GGplot
rm(list=ls())
setwd('C:/GD/DS/Lefort/RelevanciaEstatistica/INGLES/ML')
data = read.csv('outputdata/pca.csv')
data[1] = NULL
# Tratamento da classe lombalgia para plot
data$classe = sub('False','No',data$classe)
data$classe = sub('True','Yes',data$classe)
data$classe = as.factor(data$classe)
#Plot ggplot 2D
library(tidyverse)
theme = theme_bw(base_size = 15) +
theme(legend.position = 'right',
legend.title = element_text(size = 18),
legend.text = element_text(size = 12), #Posição da legenda
plot.title = element_text(hjust =0.5), #Posição do título
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_blank(),
axis.text.y=element_text(colour="black"), #Cor do texto dos eixos
strip.background =element_rect(fill=NA, colour = NA)) #Cor do background dos títulos de cada
names(data)[4] = 'Lombalgia'
names(data)
g = ggplot(data, aes(x = PC1, y = PC2)) +
geom_point(aes(fill = Lombalgia, color = Lombalgia, shape = Lombalgia), size = 3) +
xlab('Principal Component 1') +
ylab('Principal Component 2') +
scale_fill_manual(values = c('#FF0000','#0000FF')) +
scale_color_manual(values = c('#FF0000','#0000FF')) +
labs(fill = 'Low back pain', color = 'Low back pain', shape = "Low back pain")
theme
g
tiff('outputdata/img/PCA2D.tiff', units = 'in', width = 8, height = 6, res = 300)
g
dev.off()
g = ggplot(data, aes(x = PC1, y = PC2)) +
geom_point(aes(fill = Lombalgia, color = Lombalgia, shape = Lombalgia), size = 3) +
xlab('Principal Component 1') +
ylab('Principal Component 2') +
scale_fill_manual(values = c('#FF0000','#0000FF')) +
scale_color_manual(values = c('#FF0000','#0000FF')) +
labs(fill = 'Low back pain', color = 'Low back pain', shape = "Low back pain") +
theme
g
tiff('outputdata/img/PCA2D.tiff', units = 'in', width = 8, height = 6, res = 300)
g
dev.off()
