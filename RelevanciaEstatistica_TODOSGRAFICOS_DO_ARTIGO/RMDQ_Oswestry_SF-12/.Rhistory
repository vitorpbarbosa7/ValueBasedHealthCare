}
crosstable = data.frame(cbind(denominador, numerador, freq22, chi, qte_denom, nums))
#Para lidar com perda de variaveis de outras abas
df_crosstable = crosstable
crosstable = df_crosstable
names(crosstable) = c("denominador", "numerador", "Frequência","P-value","Qtd_1_Denom", "Qtd_0_Demon",
"D0N0",'D0N1','D1N0','D1N1')
#Deletar as variaveis que podem confundir com nome de colunas do dataframe
#rm(denominador,numerador, freq22,chi,qte_denom,nums)
crosstable$Frequência = as.numeric(crosstable$Frequência)
crosstable$`P-value` = as.numeric(crosstable$`P-value`)
crosstable$Qtd_1_Denom = as.numeric(crosstable$Qtd_1_Denom)
crosstable$Qtd_0_Demon = as.numeric(crosstable$Qtd_0_Demon)
crosstable$D0N0 = as.numeric(crosstable$D0N0)
crosstable$D0N1 = as.numeric(crosstable$D0N1)
crosstable$D1N0 = as.numeric(crosstable$D1N0)
crosstable$D1N1 = as.numeric(crosstable$D1N1)
#Substituir os nomes das variaveis de Dor Neuropatica
oldDN4 = c("DN4_1a_v1","DN4_1b_v1","DN4_1c_v1","DN4_2a_v1","DN4_2b_v1","DN4_2c_v1","DN4_2d_v1","DN4_3a_v1","DN4_3b_v1","DN4_4_v1")
newDN4 = c("DN4 - Queimação","DN4 - Sensação de frio dolorosa","DN4 - Choque elétrico","DN4 - Formigamento",
"DN4 - Alfinetada e agulhada","DN4 - Adormecimento","DN4 - Coceira",
"DH4 - Hipoestesia ao toque","DN4 - Hipoestesia a picada de agulha",
"DN4 - Escovação")
oldnames = c("Dor_costas","Analg.e9.sicos","Casado_Amasiado","D30","Dor_pernas","Cirurgia_coluna")
newnames = c("Dor nas costas","Analgésicos","Casado/Amasiaado","Lombalgia","Dor nas pernas","Cirurgia na coluna")
#Substituir
for (i in 1:length(oldDN4)){
crosstable$denominador = sub(oldDN4[i],newDN4[i],crosstable$denominador)
crosstable$numerador = sub(oldDN4[i],newDN4[i],crosstable$numerador)
}
for (i in 1:length(newnames)){
crosstable$denominador = sub(oldnames[i],newnames[i],crosstable$denominador)
crosstable$numerador = sub(oldnames[i],newnames[i],crosstable$numerador)
}
#Gravar sem filtro de p-value
write.csv(x = crosstable, file = 'outputdata/crosstable_semfiltropvalue.csv')
#Gravar com filtro de p-value mas não filtro de frequência
data_general = crosstable
data_general = data_general[data_general$`P-value` < 0.05,]
write.csv(x = data_general, file = 'outputdata/crosstable_general.csv')
data = crosstable
datachi = data[data$`P-value` < 0.05, ]
datachi = datachi[datachi$Frequência > 0.2, ]
datachi = datachi[datachi$D0N0 > 10, ]
datachi = datachi[datachi$D1N0 > 10, ]
datachi = datachi[datachi$D0N1 > 10, ]
datachi = datachi[datachi$D1N1 > 10, ]
datachi2 = subset(datachi, !is.na(datachi$D1N1))
write.csv(x = datachi2, file = 'outputdata/datachi.csv', row.names = FALSE)
# Apenas Dor nas costas, Lombalgia e Dor nas pernas -----------------------
datachi3 = read.csv('outputdata/datachi.csv')
datachi3 = filter(datachi3, denominador %in% c('Lombalgia','Dor nas pernas','Dor nas costas'))
datachi3 = filter(datachi3, !numerador %in% c('Lombalgia','Dor nas pernas','Dor nas costas'))
da
datachi3
write.csv(datachi3, file = 'outputdata/datachi_3variables', row.names = FALSE)
# library
rm(list=ls())
library(tidyverse)
setwd('C:/GD/DS/Lefort/RelevanciaEstatistica/RMDQ_Oswestry_SF-12')
d30 = read.csv('outputdata/datachi_3variables.csv')
write.csv(datachi3, file = 'outputdata/datachi_3variables.csv', row.names = FALSE)
write.csv(datachi3, file = 'outputdata/datachi_3variables.csv', row.names = FALSE)
datachi3
# Apenas Dor nas costas, Lombalgia e Dor nas pernas -----------------------
datachi3 = read.csv('outputdata/datachi.csv')
datachi3 = filter(datachi3, denominador %in% c('Lombalgia','Dor nas pernas','Dor nas costas'))
datachi3 = filter(datachi3, !numerador %in% c('Lombalgia','Dor nas pernas','Dor nas costas'))
datachi3
write.csv(datachi3, file = 'outputdata/datachi_3variables.csv', row.names = FALSE)
# library
rm(list=ls())
library(tidyverse)
setwd('C:/GD/DS/Lefort/RelevanciaEstatistica/RMDQ_Oswestry_SF-12')
d30 = read.csv('outputdata/datachi_3variables.csv')
d30[1] =  NULL
names(d30)[3] = 'value'
names(d30)[2] = 'individual'
names(d30)[1] = 'Variável'
data = d30
View(data)
data[c(4:10)] = NULL
data$value = 100*data$value
#Change factor level order
data$Variável = fct_rev(data$Variável)
# Set a number of 'empty bar' to add at the end of each Variável
empty_bar <- 0
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$Variável), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$Variável <- rep(levels(data$Variável), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(Variável)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
#Criar uma label customizada
label_data$value = round(label_data$value, 2)
label_data$individual = paste(label_data$individual," - (",label_data$value,")",sep = "")
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=Variável)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(stat="identity", alpha = 0.6) +
ylim(0,100) +
theme_minimal() +
theme(
legend.position = 'bottom',
axis.text.x = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 25),
#Tamanho da legenda
legend.title = element_text(size = 18),
legend.text = element_text(size = 14),
axis.text.y = element_blank()
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value-20, label=individual, hjust=hjust),
color="black", fontface="bold",alpha=0.9, size=6, angle= label_data$angle, inherit.aes = FALSE ) +
xlab('') +
ylab('') +
ggtitle("Correlação entre variáveis binárias \n a partir da tabela cruzada")
p
dev.off()
p
# library
rm(list=ls())
library(tidyverse)
setwd('C:/GD/DS/Lefort/RelevanciaEstatistica/RMDQ_Oswestry_SF-12')
d30 = read.csv('outputdata/datachi_3variables.csv')
d30[1] =  NULL
# library
rm(list=ls())
library(tidyverse)
setwd('C:/GD/DS/Lefort/RelevanciaEstatistica/RMDQ_Oswestry_SF-12')
d30 = read.csv('outputdata/datachi_3variables.csv')
names(d30)[3] = 'value'
names(d30)[2] = 'individual'
names(d30)[1] = 'Variável'
data = d30
data[c(4:10)] = NULL
data$value = 100*data$value
#Change factor level order
data$Variável = fct_rev(data$Variável)
# Set a number of 'empty bar' to add at the end of each Variável
empty_bar <- 0
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$Variável), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$Variável <- rep(levels(data$Variável), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(Variável)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
#Criar uma label customizada
label_data$value = round(label_data$value, 2)
label_data$individual = paste(label_data$individual," - (",label_data$value,")",sep = "")
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=Variável)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(stat="identity", alpha = 0.6) +
ylim(0,100) +
theme_minimal() +
theme(
legend.position = 'bottom',
axis.text.x = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 25),
#Tamanho da legenda
legend.title = element_text(size = 18),
legend.text = element_text(size = 14),
axis.text.y = element_blank()
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value-20, label=individual, hjust=hjust),
color="black", fontface="bold",alpha=0.9, size=6, angle= label_data$angle, inherit.aes = FALSE ) +
xlab('') +
ylab('') +
ggtitle("Correlação entre variáveis binárias \n a partir da tabela cruzada")
p
# Plot com barras ---------------------------------------------------------
theme = theme_bw(base_size = 15) +
theme(legend.position = 'right',
legend.title = element_text(size = 18),
legend.text = element_text(size = 12), #Posição da legenda
plot.title = element_text(hjust =0.5), #Posição do título
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_text(colour ='black'),
axis.text.y=element_text(colour="black"), #Cor do texto dos eixos
strip.background =element_rect(fill=NA, colour = NA)) #Cor do background dos títulos de cada face
View(data)
gbar = ggplot(data, aes(x = reorder(individual,value), y = value, fill = Variável)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 0.8) +
coord_flip() +
xlab('Variáveis ordinais') +
ylab('Coeficiente de correlação de ponto bisserial') +
theme
gbar
tiff('outputdata/imgs/Lombar_Costas_Pernas_Crosstable.tiff', width = 12, height = 10, units ='in', res = 300)
gbar
dev.off()
gbar = ggplot(data, aes(x = reorder(individual,value), y = value, fill = Variável)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 0.8) +
coord_flip() +
xlab('Variáveis binárias') +
ylab('Frequência') +
theme
gbar
tiff('outputdata/imgs/Lombar_Costas_Pernas_Crosstable.tiff', width = 12, height = 10, units ='in', res = 300)
gbar
dev.off()
rm(list=ls())
# setwd('C:/Users/vitor/OneDrive - IPT/Lefort/Segmentacao1')
# setwd('C:/Users/vpb/OneDrive - IPT/Lefort/Segmentacao1')
setwd('C:/GD/DS/Lefort/RelevanciaEstatistica/RMDQ_Oswestry_SF-12')
library(tidyverse)
library(GGally)
library(lattice)
# Objetivo deste código é conseguir visualizar correlações entre as variáveis cont??nuas, e entre as variáveis
# cont??nuas e variáveis binárias para as variáveis do questionário 1 e 2
# Juntar as bases de de binarios e ordinarios ------------------------------------------------
#Todas binárias até o momento
Bin_Gut_BPI_RMDQ_DN = read.csv('indata/Bin_Got_BPI_RMDQ_DN.csv')
#Ordinais até SF
Ord_Gut_BPI_Oswestry_RMDQ_SF = read.csv('indata/Ordinal_Gut_BPI_Oswestry_RMDQ_SF.csv', sep = ',')
Ord_Gut_BPI_Oswestry_RMDQ_SF[1] = NULL
#Binárias e ordinais até o momento
Binaria_Ordinal_Q1_Q2_Q3_Q4_Q5_Q6 = data.frame(cbind(Bin_Gut_BPI_RMDQ_DN,Ord_Gut_BPI_Oswestry_RMDQ_SF))
# Subset com as variáveis ordinais ----------------------------------------
ordinallist = names(Ord_Gut_BPI_Oswestry_RMDQ_SF)
ordinaldf = Ord_Gut_BPI_Oswestry_RMDQ_SF
# Variáveis Binárias ----------------------------------------
bindata = Bin_Gut_BPI_RMDQ_DN #(Oswestry e SF não tem binária)
# SELECIONANDO APENAS OSWESTRY, RMDQ E DN EM ORDINAL PARA CORRELACIONAR COM DOR NA LOMBAR E PERNA
ordinaldf = ordinaldf[,-c(1:22)]
# SELECIONANDO APENAS OSWESTRY, RMDQ E DN DAS BINARIAS
bindata = bindata[,-c(1:9,12:20,23:41,43:68)]
binarias_RMDQ = bindata[,-c(30:39)]
write.csv(binarias_RMDQ,file = 'outputdata/binarias_RMDQ.csv', row.names = FALSE)
#N?o há relação de ordinalidade, logo, todos os dados do dataset bindata são
#Se N?o adicionarmos [], R N?o mantém a estrutura de fatores
bindata[] = lapply(bindata[], factor)
dfbind = cbind(ordinaldf,bindata)
write.csv(dfbind,'outputdata/binaria_e_ordinal.csv')
library(reshape2)
meltdata = melt(data = dfbind, id.vars = names(bindata), measure.vars = names(ordinaldf))
names(meltdata)
write.csv(meltdata, 'outputdata/meltdataboxsplot.csv')
#Dor na lombar
ggplot(data = meltdata, aes(D30,value)) +
geom_boxplot(aes(fill = D30)) +
geom_jitter(size = 0.5) +
facet_wrap(.~variable, scales = "free")
# Coeficiente de correlação de ponto bisserial ----------------------------
library(polycor)
# Matriz de correlação  ---------------------------------------------------
rpb = matrix(NA, nrow = length(ordinaldf)*length(bindata), ncol = 1)
xaxis = matrix(NA, nrow = length(ordinaldf)*length(bindata), ncol = 1)
yaxis = matrix(NA, nrow = length(ordinaldf)*length(bindata), ncol = 1)
cont_Bin_0 = matrix(NA, nrow = length(ordinaldf)*length(bindata), ncol = 1)
cont_Bin_1 = matrix(NA, nrow = length(ordinaldf)*length(bindata), ncol = 1)
missing = matrix(NA, nrow = length(ordinaldf)*length(bindata), ncol = 1)
pvalue = matrix(NA, nrow = length(ordinaldf)*length(bindata), ncol = 1)
cont = 1
for (j in 1:length(bindata)){
for (i in 1:length(ordinaldf)){
var1 = ordinaldf[[i]]
var2 = bindata[[j]]
rpb[cont,] = polyserial(as.numeric(ordinaldf[[i]]), as.numeric(bindata[[j]]))
pvalue[cont,] = cor.test(as.numeric(ordinaldf[[i]]),as.numeric(bindata[[j]]))$p.value
xaxis[cont,] = names(ordinaldf[i])
yaxis[cont,] = names(bindata[j])
#Retornar contagem de valores zero e valores um da variável binária
#Isto é importante para saber quantos dados temos na correlação
#As vezes a correlação é grande só porque temos poucos dados
aux = data.frame(bin = bindata[[j]], ord = ordinaldf[[i]])
aux_ = aux[complete.cases(aux),]
tbl = table(aux_[[1]]) #Contar apenas o número de zeros e ones do binário, que é a primeira coluna
cont_Bin_0[cont,] = tbl[1] #Número de zeros
cont_Bin_1[cont,] = tbl[2] #Número de ones
#Ele retorna missing no boxplot se a pessoa respondeu a questão da ordinária, mas N?o respondeu a questão binária
missingord = aux[!is.na(aux[[2]]),] #O ??ndice 2 se refere à variável ordinal
missing[cont,] = sum(is.na(missingord[[1]])) #O ??ndice 1 se refere à variável binária, da qual deveremos contar os missing
cont = cont + 1
}
}
#Aqui finalmente é a matriz de correlação
pbmatrix = data.frame(cbind(yaxis, xaxis, rpb, pvalue, cont_Bin_0, cont_Bin_1, missing))
names(pbmatrix) = c("Binaria","Ordinal","rpb","pvalue","Bin_0","Bin_1","Missing")
oldDN4 = c("DN4_1a_v1","DN4_1b_v1","DN4_1c_v1","DN4_2a_v1","DN4_2b_v1","DN4_2c_v1","DN4_2d_v1","DN4_3a_v1","DN4_3b_v1","DN4_4_v1")
newDN4 = c("DN4 - Queimação","DN4 - Sensação de frio dolorosa","DN4 - Choque elétrico","DN4 - Formigamento",
"DN4 - Alfinetada e agulhada","DN4 - Adormecimento","DN4 - Coceira",
"DH4 - Hipoestesia ao toque","DN4 - Hipoestesia a picada de agulha",
"DN4 - Escovação")
oldnames = c("Dor_costas","Analg.e9.sicos","Casado_Amasiado","D30","Dor_pernas","Cirurgia_coluna")
newnames = c("Dor nas costas","Analgésicos","Casado/Amasiaado","Lombalgia","Dor nas pernas","Cirurgia na coluna")
oldord = c("Tempo_dor_costas","BPI_6_v1","Se_SP_haquantosanos",
"QtCirColuna","Tempo_dor_pernas","Dor_pernas_VAS",
"BPI_9a_v1","BPI_9b_v1","BPI_9c_v1","BPI_9d_v1","BPI_9e_v1","BPI_9f_v1","BPI_9g_v1")
neword = c("Tempo com a dor nas costas","Intensidade da dor no momento","Há quanto tempo em São Paulo se de outro local",
"Quantidade de cirurgias na coluna","Tempo com dor que irradia p/ as pernas",
"Intensidade da dor nas pernas",
"BPI - Atividde geral","BPI - Humor","BPI - Habilidade de caminhar","BPI - Trabalho",
"BPI - Relacionamento com outras pessoas","BPI - Sono","BPI - Habilidade para apreciar a vida")
#Substituir
for (i in 1:length(oldDN4)){
pbmatrix$Binaria = sub(oldDN4[i],newDN4[i],pbmatrix$Binaria)
}
for (i in 1:length(newnames)){
pbmatrix$Binaria = sub(oldnames[i],newnames[i],pbmatrix$Binaria)
}
for (i in 1:length(neword)){
pbmatrix$Ordinal = sub(oldord[i],neword[i],pbmatrix$Ordinal)
}
write.csv(pbmatrix, 'outputdata/biserial_nopvaluefilter.csv', row.names = FALSE)
# P-Value Filter ----------------------------------------------------------
data = read.csv('outputdata/biserial_nopvaluefilter.csv')
data_pvalue = data[data$pvalue < 0.05, ]
data_pvalue = subset(data_pvalue, !is.na(data_pvalue$Binaria))
write.csv(data_pvalue, file = 'outputdata/biseral_pvaluefilter.csv', row.names = FALSE)
# Mais filtros ------------------------------------------------------------
data_pvalue = data_pvalue[data_pvalue$rpb < 0.9999, ]
data_pvalue = data_pvalue[data_pvalue$rpb < -0.3 | data_pvalue$rpb > 0.3, ]
write.csv(data_pvalue, file = 'outputdata/biserial_pvaluefilter_03.csv', row.names = FALSE)
# Selecionando apenas algumas das binarias --------------------------------
library(tidyverse)
data_ = data_pvalue %>% filter(
Binaria %in% c("Dor nas costas", "Dor nas pernas", "Lombalgia")
)
#Remover a tanto tempo em são paulo
data_ = data_[data_$Ordinal!= 'Há quanto tempo em São Paulo se de outro local',]
write.csv(data_, file = 'outputdata/biserial_pvalue_DoresPrincipais.csv', row.names = FALSE, fileEncoding = 'UTF-8')
data_
# library
rm(list=ls())
library(tidyverse)
setwd('C:/GD/DS/Lefort/RelevanciaEstatistica/RMDQ_Oswestry_SF-12')
d30 = read.csv('outputdata/biserial_pvalue_DoresPrincipais.csv', encoding = 'UTF-8')
names(d30)[3] = 'value'
names(d30)[2] = 'individual'
names(d30)[1] = 'Variável'
data = d30
data[c(4:6)] = NULL
data$value = 100*data$value
#Change factor level order
data$Variável = fct_rev(data$Variável)
# Set a number of 'empty bar' to add at the end of each Variável
empty_bar <- 0
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$Variável), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$Variável <- rep(levels(data$Variável), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(Variável)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
#Criar uma label customizada
label_data$value = round(label_data$value, 2)
label_data$individual = paste(label_data$individual," - (",label_data$value,")",sep = "")
#Para os casos de valores negativos
position = ifelse(label_data$value>0,label_data$value,50) #Nesse caso quando for -80 lá em baixo
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=Variável)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(stat="identity", alpha = 0.6) +
ylim(-70,102) +
theme_minimal() +
theme(
legend.position = 'bottom',
axis.text.x = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 25),
#Tamanho da legenda
legend.title = element_text(size = 30),
legend.text = element_text(size = 26),
axis.text.y = element_blank()
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=position-80, label=individual, hjust=hjust),
color="black", fontface="bold",alpha=0.9, size=7, angle= label_data$angle, inherit.aes = FALSE ) +
xlab('') +
ylab('') +
ggtitle("Correlação entre variáveis binárias \n e variáveis ordinais")
p
tiff('outputdata/imgs/Lombar_Costas_Pernas_Bisserial.tiff', width = 24, height = 22, units ='in', res = 300)
p
dev.off()
# Plot com barras ---------------------------------------------------------
theme = theme_bw(base_size = 15) +
theme(legend.position = 'right',
legend.title = element_text(size = 18),
legend.text = element_text(size = 12), #Posição da legenda
plot.title = element_text(hjust =0.5), #Posição do título
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_text(colour ='black'),
axis.text.y=element_text(colour="black"), #Cor do texto dos eixos
strip.background =element_rect(fill=NA, colour = NA)) #Cor do background dos títulos de cada face
gbar = ggplot(data, aes(x = reorder(individual,value), y = value, fill = Variável)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 0.8) +
coord_flip() +
xlab('Variáveis ordinais') +
ylab('Coeficiente de correlação de ponto bisserial') +
theme
gbar
tiff('outputdata/imgs/Lombar_Costas_Pernas_Bisserial.tiff', width = 12, height = 10, units ='in', res = 300)
gbar
dev.off()
# Plot com barras ---------------------------------------------------------
theme = theme_bw(base_size = 15) +
theme(legend.position = 'right',
legend.title = element_text(size = 18),
legend.text = element_text(size = 12), #Posição da legenda
plot.title = element_text(hjust =0.5), #Posição do título
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_text(colour ='black'),
axis.text.y=element_text(colour="black"), #Cor do texto dos eixos
strip.background =element_rect(fill=NA, colour = NA)) #Cor do background dos títulos de cada face
gbar = ggplot(data, aes(x = reorder(individual,value), y = value, fill = Variável)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 0.8) +
coord_flip() +
xlab('Variáveis ordinais') +
ylab('Coeficiente de correlação de ponto bisserial') +
theme
gbar
tiff('outputdata/imgs/Lombar_Costas_Pernas_Bisserial.tiff', width = 12, height = 10, units ='in', res = 300)
gbar
dev.off()
tiff('outputdata/imgs/Lombar_Costas_Pernas_Bisserial.tiff', width = 8, height = 6, units ='in', res = 300)
gbar
dev.off()
# library
rm(list=ls())
library(tidyverse)
setwd('C:/GD/DS/Lefort/RelevanciaEstatistica/RMDQ_Oswestry_SF-12')
d30 = read.csv('outputdata/biserial_pvalue_DoresPrincipais.csv', encoding = 'UTF-8')
names(d30)[3] = 'value'
names(d30)[2] = 'individual'
names(d30)[1] = 'Variável'
data = d30
data[c(4:6)] = NULL
data$value = 100*data$value
#Change factor level order
data$Variável = fct_rev(data$Variável)
# Plot com barras ---------------------------------------------------------
theme = theme_bw(base_size = 15) +
theme(legend.position = 'right',
legend.title = element_text(size = 18),
legend.text = element_text(size = 12), #Posição da legenda
plot.title = element_text(hjust =0.5), #Posição do título
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_text(colour ='black'),
axis.text.y=element_text(colour="black"), #Cor do texto dos eixos
strip.background =element_rect(fill=NA, colour = NA)) #Cor do background dos títulos de cada face
gbar = ggplot(data, aes(x = reorder(individual,value), y = value, fill = Variável)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 0.8) +
coord_flip() +
xlab('Variáveis ordinais') +
ylab('Coeficiente de correlação de ponto bisserial') +
theme
gbar
tiff('outputdata/imgs/Lombar_Costas_Pernas_Bisserial.tiff', width = 12, height = 10, units ='in', res = 300)
gbar
dev.off()
tiff('outputdata/imgs/Lombar_Costas_Pernas_Crosstable.tiff', width = 8, height = 6, units ='in', res = 300)
# library
rm(list=ls())
library(tidyverse)
setwd('C:/GD/DS/Lefort/RelevanciaEstatistica/RMDQ_Oswestry_SF-12')
d30 = read.csv('outputdata/datachi_3variables.csv')
names(d30)[3] = 'value'
names(d30)[2] = 'individual'
names(d30)[1] = 'Variável'
data = d30
data[c(4:10)] = NULL
data$value = 100*data$value
#Change factor level order
data$Variável = fct_rev(data$Variável)
# Plot com barras ---------------------------------------------------------
theme = theme_bw(base_size = 15) +
theme(legend.position = 'right',
legend.title = element_text(size = 18),
legend.text = element_text(size = 12), #Posição da legenda
plot.title = element_text(hjust =0.5), #Posição do título
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_text(colour ='black'),
axis.text.y=element_text(colour="black"), #Cor do texto dos eixos
strip.background =element_rect(fill=NA, colour = NA)) #Cor do background dos títulos de cada face
gbar = ggplot(data, aes(x = reorder(individual,value), y = value, fill = Variável)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 0.8) +
coord_flip() +
xlab('Variáveis binárias') +
ylab('Frequência') +
theme
gbar
tiff('outputdata/imgs/Lombar_Costas_Pernas_Crosstable.tiff', width = 8, height = 6, units ='in', res = 300)
gbar
dev.off()
tiff('outputdata/imgs/Lombar_Costas_Pernas_Crosstable.tiff', width = 6, height = 4, units ='in', res = 150)
gbar
dev.off()
