theme
gseg
gseg = ggplot(data, aes(x = reorder(individual, value), y = value)) +
geom_point(aes(color = Variável, fill = Variável), size = 5,
stat = "identity", position = position_dodge(0.8)) +
geom_segment(aes(x = individual, xend = individual, y = 0, yend = value,
color = Variável, fill = Variável), alpha = 0.5, size = 2,
stat = "identity", position = position_dodge(0.8)) +
coord_flip() +
# geom_text(aes(label = value), hjust = 1.2, vjust = -0.09, size = 6) +
xlab("Variáveis ordinais") +
ylab("Coeficiente de correlação de ponto bisserial") +
# scale_color_manual(name = 'Família', values =  cores) +
# scale_fill_manual(name = 'Família', values =  cores) +
theme
gseg
gseg = ggplot(data, aes(x = reorder(individual, value), y = value)) +
geom_point(aes(color = Variável, fill = Variável), size = 5,
stat = "identity", position = position_dodge(1)) +
geom_segment(aes(x = individual, xend = individual, y = 0, yend = value,
color = Variável, fill = Variável), alpha = 0.5, size = 2,
stat = "identity", position = position_dodge(0.8)) +
coord_flip() +
# geom_text(aes(label = value), hjust = 1.2, vjust = -0.09, size = 6) +
xlab("Variáveis ordinais") +
ylab("Coeficiente de correlação de ponto bisserial") +
# scale_color_manual(name = 'Família', values =  cores) +
# scale_fill_manual(name = 'Família', values =  cores) +
theme
gseg
gseg = ggplot(data, aes(x = reorder(individual, value), y = value)) +
geom_point(aes(color = Variável, fill = Variável), size = 5,
stat = "identity", position = position_dodge()) +
geom_segment(aes(x = individual, xend = individual, y = 0, yend = value,
color = Variável, fill = Variável), alpha = 0.5, size = 2,
stat = "identity", position = position_dodge()) +
coord_flip() +
# geom_text(aes(label = value), hjust = 1.2, vjust = -0.09, size = 6) +
xlab("Variáveis ordinais") +
ylab("Coeficiente de correlação de ponto bisserial") +
# scale_color_manual(name = 'Família', values =  cores) +
# scale_fill_manual(name = 'Família', values =  cores) +
theme
gseg
gseg = ggplot(data, aes(x = reorder(individual, value), y = value)) +
geom_point(aes(color = Variável, fill = Variável), size = 5,
stat = "identity", position = position_dodge(width = 5)) +
geom_segment(aes(x = individual, xend = individual, y = 0, yend = value,
color = Variável, fill = Variável), alpha = 0.5, size = 2,
stat = "identity", position = position_dodge()) +
coord_flip() +
# geom_text(aes(label = value), hjust = 1.2, vjust = -0.09, size = 6) +
xlab("Variáveis ordinais") +
ylab("Coeficiente de correlação de ponto bisserial") +
# scale_color_manual(name = 'Família', values =  cores) +
# scale_fill_manual(name = 'Família', values =  cores) +
theme
gseg
gseg = ggplot(data, aes(x = reorder(individual, value), y = value)) +
geom_point(aes(color = Variável, fill = Variável), size = 5,
stat = "identity", position = position_dodge(width = 5)) +
geom_segment(aes(x = individual, xend = individual, y = 0, yend = value,
color = Variável, fill = Variável), alpha = 0.5, size = 2,
stat = "identity", position = position_dodge(width = 5)) +
coord_flip() +
# geom_text(aes(label = value), hjust = 1.2, vjust = -0.09, size = 6) +
xlab("Variáveis ordinais") +
ylab("Coeficiente de correlação de ponto bisserial") +
# scale_color_manual(name = 'Família', values =  cores) +
# scale_fill_manual(name = 'Família', values =  cores) +
theme
gseg
# library
rm(list=ls())
library(tidyverse)
setwd('C:/GD/DS/Lefort/RelevanciaEstatistica')
d30 = read.csv('outputdata/datachi_5variables.csv')
d30[1] =  NULL
names(d30)[3] = 'value'
names(d30)[2] = 'individual'
names(d30)[1] = 'Variável'
data = d30
data[c(4:10)] = NULL
data$value = 100*data$value
#Change factor level order
data$Variável = fct_rev(data$Variável)
# Set a number of 'empty bar' to add at the end of each Variável
empty_bar <- 0
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$Variável), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$Variável <- rep(levels(data$Variável), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(Variável)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
#Criar uma label customizada
label_data$value = round(label_data$value, 2)
label_data$individual = paste(label_data$individual," - (",label_data$value,")",sep = "")
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=Variável)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(stat="identity", alpha = 0.6) +
ylim(0,100) +
theme_minimal() +
theme(
legend.position = 'bottom',
axis.text.x = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 25),
#Tamanho da legenda
legend.title = element_text(size = 22),
legend.text = element_text(size = 14),
axis.text.y = element_blank()
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value-40, label=individual, hjust=hjust),
color="black", fontface="bold",alpha=0.9, size=8, angle= label_data$angle, inherit.aes = FALSE ) +
xlab('') +
ylab('') +
ggtitle("Correlação entre variáveis binárias \n a partir da tabela cruzada")
p
tiff('outputdata/imgs/Lombar_Costas_Pernas_Desemprego_Cirurgia.tiff',
width = 16, height = 16, units ='in', res = 200)
p
dev.off()
# library
rm(list=ls())
library(tidyverse)
setwd('C:/GD/DS/Lefort/RelevanciaEstatistica')
d30 = read.csv('outputdata/datachi_5variables.csv')
d30[1] =  NULL
names(d30)[3] = 'value'
names(d30)[2] = 'individual'
names(d30)[1] = 'Variável'
data = d30
data[c(4:10)] = NULL
data$value = 100*data$value
#Change factor level order
data$Variável = fct_rev(data$Variável)
# Set a number of 'empty bar' to add at the end of each Variável
empty_bar <- 0
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$Variável), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$Variável <- rep(levels(data$Variável), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(Variável)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
#Criar uma label customizada
label_data$value = round(label_data$value, 2)
label_data$individual = paste(label_data$individual," - (",label_data$value,")",sep = "")
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=Variável)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(stat="identity", alpha = 0.6) +
ylim(0,100) +
theme_minimal() +
theme(
legend.position = 'bottom',
axis.text.x = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 25),
#Tamanho da legenda
legend.title = element_text(size = 22),
legend.text = element_text(size = 22),
axis.text.y = element_blank()
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value-40, label=individual, hjust=hjust),
color="black", fontface="bold",alpha=0.9, size=8, angle= label_data$angle, inherit.aes = FALSE ) +
xlab('') +
ylab('') +
# ggtitle("Correlação entre variáveis binárias \n a partir da tabela cruzada")
p
◘
tiff('outputdata/imgs/Lombar_Costas_Pernas_Desemprego_Cirurgia.tiff',
width = 16, height = 16, units ='in', res = 200)
p
dev.off()
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=Variável)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(stat="identity", alpha = 0.6) +
ylim(0,100) +
theme_minimal() +
theme(
legend.position = 'bottom',
axis.text.x = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 25),
#Tamanho da legenda
legend.title = element_text(size = 22),
legend.text = element_text(size = 22),
axis.text.y = element_blank()
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value-40, label=individual, hjust=hjust),
color="black", fontface="bold",alpha=0.9, size=8, angle= label_data$angle, inherit.aes = FALSE ) +
xlab('') +
ylab('')
# ggtitle("Correlação entre variáveis binárias \n a partir da tabela cruzada")
p
tiff('outputdata/imgs/Lombar_Costas_Pernas_Desemprego_Cirurgia.tiff',
width = 16, height = 16, units ='in', res = 200)
p
dev.off()
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=Variável)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(stat="identity", alpha = 0.6) +
ylim(0,100) +
theme_minimal() +
theme(
legend.position = 'bottom',
axis.text.x = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 25),
#Tamanho da legenda
legend.title = element_text(size = 22),
legend.text = element_text(size = 30),
axis.text.y = element_blank()
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value-40, label=individual, hjust=hjust),
color="black", fontface="bold",alpha=0.9, size=8, angle= label_data$angle, inherit.aes = FALSE ) +
xlab('') +
ylab('')
# ggtitle("Correlação entre variáveis binárias \n a partir da tabela cruzada")
p
tiff('outputdata/imgs/Lombar_Costas_Pernas_Desemprego_Cirurgia.tiff',
width = 16, height = 16, units ='in', res = 200)
p
dev.off()
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=Variável)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(stat="identity", alpha = 0.6) +
ylim(0,100) +
theme_minimal() +
theme(
legend.position = 'bottom',
axis.text.x = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 25),
#Tamanho da legenda
legend.title = element_text(size = 30),
legend.text = element_text(size = 28),
axis.text.y = element_blank()
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value-40, label=individual, hjust=hjust),
color="black", fontface="bold",alpha=0.9, size=8, angle= label_data$angle, inherit.aes = FALSE ) +
xlab('') +
ylab('')
# ggtitle("Correlação entre variáveis binárias \n a partir da tabela cruzada")
p
tiff('outputdata/imgs/Lombar_Costas_Pernas_Desemprego_Cirurgia.tiff',
width = 16, height = 16, units ='in', res = 200)
p
dev.off()
rm(list=ls())
setwd('C:/GD/DS/Lefort/ML')
#Fazer o PCA no R
pcadata = read.csv('outputdata/Xpcadata.csv')
pcadata[1] = NULL
#Aplicacao PCA
pcacorr = prcomp(pcadata, scale = T)
summary(pcacorr)
names(pcacorr)
desvios_pca = pcacorr$sdev
loadings = pcacorr$rotation
df_loadings = as.data.frame(loadings)
medias = pcacorr$center
coordenadas = pcacorr$x
#Extraaindo mais valores do objeto PCA para realizar plots
library(factoextra)
pca_var2 = get_eigenvalue(pcacorr)
variancias = pca_var2$eigenvalue
# Screeplot ---------------------------------------------------------------
#Screeplot:
fviz_eig(pcacorr)
tiff("outputdata/img/screeplot.tiff", width = 2000, height = 1600, res = 300)
plot(pca_var2$cumulative.variance.percent,type = 'b',
ylab = "Porcentagem da variância acumulada (%)",
xlab = "Componentes Principais")
abline(h=90,lty=2,lwd=1.5,col=2)
dev.off()
# Loadings Plot -----------------------------------------------------------=
#Ordenar toda a matriz loadings de acordo com o crit?rio de valores presentes na coluna PC1
#loadings[order(abs(###ordenar as linhas###, de acordo com crit?rio da coluna ))]
#Este c?digo retorna um vetor ordenado com as correspond?ncias entre loadings do PC1 e cada Variavel
# ordenado = loadings[order(abs(loadings[,1])),1]
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$PC1), ncol=1)
for (i in 1:length(df_loadings$PC1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
dotchart(ordenado,
cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
Sys.sleep(1)
}
write.csv( Variaveis_Importantes, 'outputdata/Variaveis_Principais_PCA.csv')
biplot(pcacorr,scale = 0,cex=c(0.5,0.85))
# GGplot
rm(list=ls())
data = read.csv('outputdata/pca.csv')
data[1] = NULL
# Tratamento da classe lombalgia para plot
data$classe = sub('False','Não',data$classe)
data$classe = sub('True','Sim',data$classe)
names(data)[4] = 'Lombalgia'
data$Lombalgia = as.factor(data$Lombalgia)
#Plot 3D
library(scatterplot3d)
colors <- c("#999999", "#E69F00")
colors = colors[as.numeric(data$Lombalgia)]
scatterplot3d(data[,1:3], color = colors, pch = 16,
box = F, angle = 30, cex.symbols = 1.2)
legend("right", legend = levels(data$Lombalgia), col = c("#999999", "#E69F00"), pch =16)
library(plotly)
#Plot ggplot 2D
library(tidyverse)
theme = theme_bw(base_size = 15) +
theme(legend.position = 'right',
legend.title = element_text(size = 18),
legend.text = element_text(size = 12), #Posição da legenda
plot.title = element_text(hjust =0.5), #Posição do título
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_blank(),
axis.text.y=element_text(colour="black"), #Cor do texto dos eixos
strip.background =element_rect(fill=NA, colour = NA)) #Cor do background dos títulos de cada face
g = ggplot(data, aes(x = PC1, y = PC2)) +
geom_point(aes(fill = Lombalgia, color = Lombalgia, shape = Lombalgia), size = 3) +
xlab('Componente Principal 1') +
ylab('Componente Principal 2') +
scale_fill_manual(values = c('#FF0000','#0000FF')) +
scale_color_manual(values = c('#FF0000','#0000FF')) +
theme
g
tiff('outputdata/img/PCA2D.tiff', units = 'in', width = 8, height = 6, res = 300)
g
dev.off()
rm(list=ls())
setwd('C:/GD/DS/Lefort/ML')
#Fazer o PCA no R
pcadata = read.csv('outputdata/Xpcadata.csv')
pcadata[1] = NULL
#Aplicacao PCA
pcacorr = prcomp(pcadata, scale = T)
summary(pcacorr)
names(pcacorr)
desvios_pca = pcacorr$sdev
loadings = pcacorr$rotation
df_loadings = as.data.frame(loadings)
medias = pcacorr$center
coordenadas = pcacorr$x
#Extraaindo mais valores do objeto PCA para realizar plots
library(factoextra)
pca_var2 = get_eigenvalue(pcacorr)
variancias = pca_var2$eigenvalue
# Screeplot ---------------------------------------------------------------
#Screeplot:
fviz_eig(pcacorr)
tiff("outputdata/img/screeplot.tiff", width = 2000, height = 1600, res = 300)
plot(pca_var2$cumulative.variance.percent,type = 'b',
ylab = "Porcentagem da variância acumulada (%)",
xlab = "Componentes Principais")
abline(h=90,lty=2,lwd=1.5,col=2)
dev.off()
plot(pca_var2$cumulative.variance.percent,type = 'b',
ylab = "Porcentagem da variância acumulada (%)",
xlab = "Componentes Principais")
tiff("outputdata/img/screeplot.tiff", width = 2000, height = 1600, res = 300)
# Screeplot ---------------------------------------------------------------
#Screeplot:
fviz_eig(pcacorr)
dev.off()
# Screeplot ---------------------------------------------------------------
#Screeplot:
fviz_eig(pcacorr)
tiff("outputdata/img/screeplot.tiff", width = 2000, height = 1600, res = 300)
plot(pca_var2$cumulative.variance.percent,type = 'b',
ylab = "Porcentagem da variância acumulada (%)",
xlab = "Componentes Principais")
abline(h=90,lty=2,lwd=1.5,col=2)
dev.off()
# Screeplot ---------------------------------------------------------------
#Screeplot:
fviz_eig(pcacorr)
rm(list=ls())
setwd('C:/GD/DS/Lefort/ML')
#Fazer o PCA no R
pcadata = read.csv('outputdata/Xpcadata.csv')
pcadata[1] = NULL
#Aplicacao PCA
pcacorr = prcomp(pcadata, scale = T)
summary(pcacorr)
names(pcacorr)
desvios_pca = pcacorr$sdev
loadings = pcacorr$rotation
df_loadings = as.data.frame(loadings)
medias = pcacorr$center
coordenadas = pcacorr$x
#Extraaindo mais valores do objeto PCA para realizar plots
library(factoextra)
pca_var2 = get_eigenvalue(pcacorr)
variancias = pca_var2$eigenvalue
# Screeplot ---------------------------------------------------------------
#Screeplot:
fviz_eig(pcacorr)
tiff("outputdata/img/screeplot.tiff", width = 2000, height = 1600, res = 300)
plot(pca_var2$cumulative.variance.percent,type = 'b',
ylab = "Porcentagem da variância acumulada (%)",
xlab = "Componentes Principais")
abline(h=90,lty=2,lwd=1.5,col=2)
dev.off()
Variaveis_Importantes
rm(list=ls())
setwd('C:/GD/DS/Lefort/ML')
#Fazer o PCA no R
pcadata = read.csv('outputdata/Xpcadata.csv')
pcadata[1] = NULL
#Aplicacao PCA
pcacorr = prcomp(pcadata, scale = T)
summary(pcacorr)
names(pcacorr)
desvios_pca = pcacorr$sdev
loadings = pcacorr$rotation
df_loadings = as.data.frame(loadings)
medias = pcacorr$center
coordenadas = pcacorr$x
#Extraaindo mais valores do objeto PCA para realizar plots
library(factoextra)
pca_var2 = get_eigenvalue(pcacorr)
variancias = pca_var2$eigenvalue
# Screeplot ---------------------------------------------------------------
#Screeplot:
fviz_eig(pcacorr)
tiff("outputdata/img/screeplot.tiff", width = 2000, height = 1600, res = 300)
plot(pca_var2$cumulative.variance.percent,type = 'b',
ylab = "Porcentagem da variância acumulada (%)",
xlab = "Componentes Principais")
abline(h=90,lty=2,lwd=1.5,col=2)
dev.off()
# Loadings Plot -----------------------------------------------------------=
#Ordenar toda a matriz loadings de acordo com o crit?rio de valores presentes na coluna PC1
#loadings[order(abs(###ordenar as linhas###, de acordo com crit?rio da coluna ))]
#Este c?digo retorna um vetor ordenado com as correspond?ncias entre loadings do PC1 e cada Variavel
# ordenado = loadings[order(abs(loadings[,1])),1]
Variaveis_Importantes = matrix(NA, nrow = length(df_loadings$PC1), ncol=1)
for (i in 1:length(df_loadings$PC1)) {
ordenado = loadings[order(abs(loadings[,i])),i]
dotchart(ordenado,
cex = 0.7, xlab = "loadings", main = "loadings")
df_ordenado = as.data.frame(ordenado)
df_ordenado$variaveis = rownames(df_ordenado)
Variaveis_Importantes[i,] = c(df_ordenado$variaveis[length(df_ordenado$variaveis)])
Sys.sleep(1)
}
Variaveis_Importantes
write.csv( Variaveis_Importantes, 'outputdata/Variaveis_Principais_PCA.csv')
biplot(pcacorr,scale = 0,cex=c(0.5,0.85))
# GGplot
rm(list=ls())
data = read.csv('outputdata/pca.csv')
data[1] = NULL
# Tratamento da classe lombalgia para plot
data$classe = sub('False','Não',data$classe)
data$classe = sub('True','Sim',data$classe)
names(data)[4] = 'Lombalgia'
data$Lombalgia = as.factor(data$Lombalgia)
#Plot 3D
library(scatterplot3d)
colors <- c("#999999", "#E69F00")
colors = colors[as.numeric(data$Lombalgia)]
scatterplot3d(data[,1:3], color = colors, pch = 16,
box = F, angle = 30, cex.symbols = 1.2)
dev.off()
scatterplot3d(data[,1:3], color = colors, pch = 16,
box = F, angle = 30, cex.symbols = 1.2)
dev.off()
legend("right", legend = levels(data$Lombalgia), col = c("#999999", "#E69F00"), pch =16)
scatterplot3d(data[,1:3], color = colors, pch = 16,
box = F, angle = 30, cex.symbols = 1.2)
legend("right", legend = levels(data$Lombalgia), col = c("#999999", "#E69F00"), pch =16)
#Plot ggplot 2D
library(tidyverse)
theme = theme_bw(base_size = 15) +
theme(legend.position = 'right',
legend.title = element_text(size = 18),
legend.text = element_text(size = 12), #Posição da legenda
plot.title = element_text(hjust =0.5), #Posição do título
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_blank(),
axis.text.y=element_text(colour="black"), #Cor do texto dos eixos
strip.background =element_rect(fill=NA, colour = NA)) #Cor do background dos títulos de cada face
g = ggplot(data, aes(x = PC1, y = PC2)) +
geom_point(aes(fill = Lombalgia, color = Lombalgia, shape = Lombalgia), size = 3) +
xlab('Componente Principal 1') +
ylab('Componente Principal 2') +
scale_fill_manual(values = c('#FF0000','#0000FF')) +
scale_color_manual(values = c('#FF0000','#0000FF')) +
theme
g
